name: Test & release overlays

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test overlays
    runs-on: windows-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Set up just
        uses: extractions/setup-just@v2
      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      - name: Install dependencies
        run: uv sync --extra dev
      - name: lint
        run: uv run ruff check .
      - name: format
        run: uv run ruff format --check
      - name: Run tests
        run: uv run pytest -v

  release:
    name: Release overlays
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      - name: Install dependencies
        run: uv sync
      - name: Extract version from pyproject.toml
        id: get_version
        shell: pwsh
        run: |
          $env:VERSION = uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"
          echo "VERSION=$env:VERSION" >> $env:GITHUB_OUTPUT
      - name: Build release
        run: uv build
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: overlays v${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
